{"version":3,"sources":["utils/Sleep.ts","algorithms/BubbleSort.ts","algorithms/HeapSort.ts","contexts/SortingContext.tsx","components/Navbar.tsx","components/Stage.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Sleep","ms","Promise","resolve","setTimeout","BubbleSort","run","delay","start","array","onStateChange","onFinish","a","sArray","length","console","log","i","j","tmp","stop","setDelay","this","HeapSort","buildMaxHeap","lastElement","swap","heapify","arr","Math","floor","heap","max","index","rightChild","leftChild","firstItemIndex","lastItemIndex","temp","SortingContext","createContext","arrayData","compareElements","status","running","algorithm","resetArray","setAlgorithm","setSortingDelay","startStop","generateArray","size","Array","map","random","SortingProvider","props","useState","setArrayData","setStatus","sortingAlg","setSortingAlg","alg","useEffect","Provider","value","children","Navbar","context","handleSizeChange","event","setState","state","arraySize","Number","currentTarget","handleAlgorithmChange","handleSpeedChange","speed","exp","handleSort","id","style","display","type","min","onChange","className","onClick","React","Component","contextType","Stage","handleResize","width","window","innerWidth","height","innerHeight","addEventListener","removeEventListener","elemWidth","fontSize","el","key","marginLeft","marginRight","backgroundColor","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d609c1d6.chunk.js","sourcesContent":["export default function Sleep(ms: number): Promise<number>{\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}","import Sleep from '../utils/Sleep';\r\nimport ISortingAlgorithm from './ISortingAlgorithm';\r\n\r\n\r\nexport default class BubbleSort implements ISortingAlgorithm {\r\n\r\n    run: boolean;\r\n    delay: number;\r\n\r\n    constructor() {\r\n        this.run = true;\r\n        this.delay = 10;\r\n    }\r\n\r\n    start = async (array: number[], onStateChange: (array: number[], compareElements: number[]) => void, onFinish: () => void) => {\r\n        let sArray = [...array];\r\n        var length = sArray.length;\r\n        console.log(\"Start\");\r\n\r\n        outsideLoop:\r\n        for (var i = 0; i < length; i++) { \r\n            for (var j = 0; j < (length - i - 1); j++) { \r\n\r\n                if(this.run === false)\r\n                    break outsideLoop;\r\n\r\n                await Sleep(this.delay);\r\n                onStateChange( sArray, [j, j+1] );\r\n                if(sArray[j] > sArray[j+1]) {           \r\n                    var tmp = sArray[j]; \r\n                    sArray[j] = sArray[j+1]; \r\n                    sArray[j+1] = tmp; \r\n                    await Sleep(this.delay);\r\n                    onStateChange( sArray, [j, j+1] );\r\n                }\r\n            }        \r\n        }\r\n        await Sleep(this.delay);\r\n        onStateChange( sArray, [-1, -1] );\r\n        onFinish();\r\n        // while(this.run === true) {\r\n        //     console.log(\"BubbleSort\");\r\n        //     await Sleep(this.delay);\r\n        // }\r\n    }\r\n\r\n    stop = () => {\r\n        console.log(\"Stop\");\r\n        this.run = false;\r\n    }\r\n\r\n    setDelay = (delay: number) => {\r\n        console.log(\"Set delay = \" + delay);\r\n        this.delay = delay;\r\n    }\r\n\r\n}\r\n\r\n\r\n","import Sleep from '../utils/Sleep';\r\nimport ISortingAlgorithm from './ISortingAlgorithm';\r\n\r\n\r\nexport default class HeapSort implements ISortingAlgorithm {\r\n\r\n    run: boolean;\r\n    delay: number;\r\n    onStateChange: (array: number[], compareElements: number[]) => void;\r\n\r\n    constructor() {\r\n        this.run = true;\r\n        this.delay = 10;\r\n        this.onStateChange = () => {}\r\n    }\r\n\r\n    start = async (array: number[], onStateChange: (array: number[], compareElements: number[]) => void, onFinish: () => void) => {\r\n        let sArray = [...array];\r\n        this.onStateChange = onStateChange;\r\n\r\n        // Build max heap\r\n        await this.buildMaxHeap(sArray);\r\n        // Get the index of the last element\r\n        let lastElement = sArray.length - 1;\r\n        \r\n        // Continue heap sorting until we have\r\n        // One element left\r\n        while (lastElement > 0) {\r\n            if(this.run == false ) break;\r\n            await this.swap(sArray, 0, lastElement);\r\n            await this.heapify(sArray, 0, lastElement);\r\n            lastElement -= 1;\r\n        }\r\n         \r\n        await Sleep(this.delay);\r\n        onStateChange( sArray, [-1, -1] );\r\n        onFinish();\r\n    }\r\n\r\n    stop = () => {\r\n        this.run = false;\r\n    }\r\n\r\n    setDelay = (delay: number) => {\r\n        this.delay = delay;\r\n    }\r\n\r\n    buildMaxHeap = async (arr: number[]) => {\r\n        // Get index of the middle element\r\n        let i = Math.floor(arr.length / 2 - 1);\r\n        \r\n        // Build a max heap out of\r\n        // All array elements passed in\r\n        while (i >= 0) {\r\n            if(this.run == false ) break;\r\n            await this.heapify(arr, i, arr.length);\r\n            i -= 1;\r\n        }\r\n    }\r\n\r\n    heapify = async (heap: number[], i: number, max: number) => {\r\n        let index: number;\r\n        let leftChild: number;\r\n        let rightChild: number;\r\n      \r\n        while (i < max) {\r\n            if(this.run == false ) break;\r\n          index = i;\r\n          leftChild = 2 * i + 1;\r\n          rightChild = leftChild + 1;\r\n      \r\n          // If the left child is not last element \r\n          // And its value is bigger\r\n          if (leftChild < max && heap[leftChild] > heap[index]) {\r\n            index = leftChild;\r\n          }\r\n      \r\n          // If the right child is not last element \r\n          // And its value is bigger\r\n          if (rightChild < max && heap[rightChild] > heap[index]) {\r\n            index = rightChild;\r\n          }\r\n      \r\n          // If none of the above conditions is true\r\n          // Just return\r\n          if (index === i) {\r\n            return;\r\n          }\r\n      \r\n          // Else swap elements\r\n          await this.swap(heap, i, index);\r\n      \r\n          // Continue by using the swapped index\r\n          i = index;\r\n        }\r\n    }\r\n\r\n    swap = async (arr: number[], firstItemIndex: number, lastItemIndex: number) => {\r\n        const temp = arr[firstItemIndex];\r\n      \r\n        // Swap first and last items in the array\r\n        arr[firstItemIndex] = arr[lastItemIndex];\r\n        arr[lastItemIndex] = temp;\r\n\r\n        await Sleep(this.delay);\r\n        this.onStateChange( arr, [firstItemIndex, lastItemIndex] );\r\n    }\r\n\r\n}\r\n\r\n\r\n","import React, { createContext, useEffect, useState } from 'react';\r\nimport ISortingAlgorithm from '../algorithms/ISortingAlgorithm';\r\nimport BubbleSort from '../algorithms/BubbleSort';\r\nimport HeapSort from '../algorithms/HeapSort';\r\nimport { stat } from 'fs';\r\n\r\nexport interface SortingArrayData {\r\n    array: number[],\r\n    compareElements: number[]\r\n}\r\n\r\nexport interface SortingStatus {\r\n    running: boolean,\r\n    delay: number,\r\n    algorithm: string\r\n}\r\n\r\nexport interface SortingContextType {\r\n    arrayData: SortingArrayData,\r\n    status: SortingStatus,\r\n    resetArray(size: number): void,\r\n    setAlgorithm(algorithm: string): void\r\n    setSortingDelay(delay: number): void\r\n    startStop(): void,\r\n} \r\n\r\nexport const SortingContext = createContext<SortingContextType>({\r\n    arrayData: { array: [], compareElements: []},\r\n    status: { running: false, delay: 10, algorithm: 'BubbleSort'},\r\n    resetArray: () => {},\r\n    setAlgorithm: () => {},\r\n    setSortingDelay: () => {},\r\n    startStop: () => {}\r\n});\r\n\r\nfunction generateArray(size: number): number[] {\r\n    return [...Array(size)].map(() => ~~(1 + Math.random() * 100) );\r\n}\r\n\r\nconst SortingProvider = (props: any) => {\r\n    const [arrayData, setArrayData] = useState<SortingArrayData>({ array: generateArray(100), compareElements: [-1, -1]});\r\n    const [status, setStatus] = useState<SortingStatus>({ running: false, delay: 10, algorithm: 'BubbleSort' });\r\n    const [sortingAlg, setSortingAlg] = useState<ISortingAlgorithm>(new BubbleSort());\r\n\r\n    const resetArray = (size: number) => {\r\n        if(!status.running)\r\n            setArrayData({ ...arrayData, \r\n                array: generateArray(size),\r\n                compareElements: [-1, -1]\r\n            });\r\n    }\r\n\r\n    const setAlgorithm = (algorithm : string) => {\r\n        setStatus( { ...status, algorithm });\r\n    }\r\n\r\n    const setSortingDelay = (delay: number) => {\r\n        setStatus({ ...status, delay: delay});\r\n        if(sortingAlg)\r\n            sortingAlg.setDelay(delay);\r\n    }\r\n\r\n    const startStop = async () => {\r\n        let alg: ISortingAlgorithm;\r\n        if(!status.running) {\r\n            switch(status.algorithm) {\r\n                case 'HeapSort':\r\n                    alg = new HeapSort();\r\n                    break;\r\n\r\n                case 'MergeSort':\r\n                    alg = new BubbleSort();\r\n                    break;\r\n                \r\n                case 'QuickSort':\r\n                    alg = new BubbleSort();\r\n                    break;\r\n\r\n                case 'BubbleSort':\r\n                default:\r\n                    alg = new BubbleSort();\r\n                    break;\r\n            }\r\n            setSortingAlg(alg);\r\n        } else\r\n            sortingAlg.stop();\r\n        setStatus(  { ...status, running: !status.running}); \r\n    }\r\n\r\n    useEffect( () => {\r\n        if(status.running) {\r\n            sortingAlg.setDelay(status.delay);\r\n            sortingAlg.start(arrayData.array, async (array: number[], compareElements: number[]) => {\r\n                setArrayData({ array, compareElements});\r\n            }, () => {\r\n                setStatus( { ...status, running: false});\r\n            });\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [sortingAlg]);\r\n\r\n\r\n    return(\r\n        <SortingContext.Provider value={ {arrayData, status, resetArray, setAlgorithm, setSortingDelay, startStop} }>\r\n            {props.children}\r\n        </SortingContext.Provider>\r\n    );\r\n}\r\n\r\nexport default SortingProvider;","import React from \"react\";\r\nimport {SortingContext} from '../contexts/SortingContext';\r\nimport './Navbar.css'\r\n\r\ninterface IProps  {\r\n  // onResetArray: any,\r\n  // onSortArray: any,\r\n  // onChangeSpeed: any\r\n}\r\n\r\ninterface IState {\r\n    arraySize: number,\r\n    speed: number\r\n}\r\n\r\nclass Navbar extends React.Component<IProps, IState> {\r\n  static contextType = SortingContext;\r\n  context!: React.ContextType<typeof SortingContext>;\r\n\r\n  constructor(props: IProps) {\r\n    super(props);\r\n    this.state = {\r\n      arraySize: 100,\r\n      speed: 100\r\n    }\r\n  }\r\n\r\n  handleSizeChange = (event: React.FormEvent<HTMLInputElement>) => {\r\n    this.setState({ ...this.state, arraySize: Number(event.currentTarget.value)});\r\n    this.context.resetArray( Number(event.currentTarget.value));\r\n  }\r\n\r\n  handleAlgorithmChange = (event: React.FormEvent<HTMLSelectElement>) => {\r\n    this.context.setAlgorithm(event.currentTarget.value);\r\n  }\r\n\r\n  handleSpeedChange = (event: React.FormEvent<HTMLInputElement>) => {\r\n    this.setState({ ...this.state, speed: Number(event.currentTarget.value)});\r\n    let speed = Number(event.currentTarget.value);\r\n    let delay = ~~((1000)*Math.exp(-0.0461*speed));\r\n    this.context.setSortingDelay(delay);\r\n  }\r\n\r\n  handleSort = async () => {\r\n    this.context.startStop();  \r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div id=\"navbar\">\r\n            <div style={{ display: \"inline-block\"} }>\r\n              <label>Collection size: </label>\r\n              <input type=\"range\" min=\"5\" max=\"100\" value={this.state.arraySize} onChange={this.handleSizeChange}/>\r\n            </div>\r\n            <div style={{ display: \"inline-block\"} }>\r\n              <label>Select algorithm: </label>\r\n              <select className=\"select-dropdown\" value={this.context.status.algorithm} onChange={this.handleAlgorithmChange}>\r\n                <option value=\"BubbleSort\">Bubble Sort</option>\r\n                <option value=\"HeapSort\">Heap Sort</option>\r\n                {/*<option value=\"MergeSort\">Merge Sort</option>\r\n                <option value=\"QuickSort\">Quick Sort</option>*/}\r\n              </select>\r\n            </div>\r\n            <div style={{ display: \"inline-block\"} }>\r\n              <label>Speed: </label>\r\n              <input type=\"range\" min=\"1\" max=\"100\" value={this.state.speed} onChange={this.handleSpeedChange}/>\r\n            </div>\r\n            <button className=\"button\" onClick={this.handleSort}>{this.context.status.running? 'Stop Sorting' : 'Start Sorting' }</button>\r\n        </div>\r\n    );\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport {SortingContext} from '../contexts/SortingContext';\r\nimport './Stage.css'\r\n\r\ninterface IProps  {\r\n  // arrayData: Number[],\r\n  // compareElements: Number[]\r\n}\r\n\r\ninterface IState {\r\n    width: number,\r\n    height: number\r\n}\r\n\r\nclass Stage extends React.Component<IProps, IState> {\r\n  static contextType = SortingContext;\r\n  context!: React.ContextType<typeof SortingContext>;\r\n\r\n  constructor(props: IProps) {\r\n    super(props);\r\n    this.state = {\r\n      width: window.innerWidth,\r\n      height: window.innerHeight\r\n    }\r\n  }\r\n\r\n  handleResize = () => {\r\n    this.setState({\r\n      width: window.innerWidth,\r\n      height: window.innerHeight\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n      window.addEventListener('resize', this.handleResize);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.handleResize)\r\n  }\r\n\r\n  render() {\r\n    const elemWidth = `${this.state.width/(this.context.arrayData.array.length)/2}px`;\r\n    const fontSize = `${this.state.width/(this.context.arrayData.array.length)/120}rem`;\r\n    const bgColor = '#189AB4';\r\n    const bgColorComp = \"#05445E\";\r\n\r\n    return(\r\n        <div id=\"container\">\r\n            {this.context.arrayData.array.map( (el: any, index: number) => \r\n                <div \r\n                  className=\"arrayElement\" \r\n                  key={index}\r\n                  style={ { \r\n                    height: `${el*6}px`, \r\n                    width: elemWidth, \r\n                    marginLeft: '0.1rem', \r\n                    marginRight: '0.1rem',\r\n                    backgroundColor: ( index === this.context.arrayData.compareElements[0] || index === this.context.arrayData.compareElements[1] ? bgColorComp: bgColor),\r\n                    fontSize: fontSize } } >\r\n                  {el}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default Stage;","import React from 'react';\r\nimport Navbar from './Navbar';\r\nimport Stage from './Stage';\r\nimport SortingContext from '../contexts/SortingContext';\r\nimport './App.css'\r\n\r\n\r\ninterface IProps  {\r\n\r\n}\r\n\r\ninterface IState {\r\n\r\n}\r\n\r\nclass App extends React.Component<IProps, IState> {\r\n  render() {\r\n    return (\r\n      <SortingContext>\r\n        <div className=\"App\">\r\n          <Navbar/>\r\n          <Stage/>\r\n        </div>\r\n      </SortingContext>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}